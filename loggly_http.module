<?php

/**
 * @file
 * Loggly HTTP module.
 */

define('LOGGLY_HTTP_LOG', 'http://logs-01.loggly.com/inputs/');

/**
 * Implements hook_boot().
 *
 * Runs even for cached pages.
 */
function loggly_http_boot() {
  drupal_register_shutdown_function('loggly_http_shutdown');
}

/**
 * Runs on shutdown to clean up and display developer information.
 *
 * devel_boot() registers this function as a shutdown function.
 */
function loggly_http_shutdown() {
  if (!$events = loggly_http_get_registered_events()) {
    return;
  }

  // Send events to loggly.
  foreach ($events as $event) {
    $loggly_endpoint = LOGGLY_HTTP_LOG . variable_get('loggly_http_token') . '/tag/http/';

    $options = array(
      'method' => 'POST',
      'headers' => array(
        'Accept' => 'text/plain',
        'Content-Type' => 'application/x-www-form-urlencoded',
      ),
      'data' => drupal_json_encode($event),
    );

    // Send data to Loggly.
    $response = drupal_http_request($loggly_endpoint, $options);
  }
}

function loggly_http_register_event(array $event = array()) {
  $events = &drupal_static('loggly_http_events', array());
  $events[] = $event;
}

function loggly_http_get_registered_events() {
  $events = &drupal_static('loggly_http_events', array());
  return $events;
}

/**
 * Implements hook_menu().
 */
function loggly_http_menu() {
  $items = array();

  $items['admin/config/services/loggly-http-client'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Loggly HTTP Client',
    'description' => 'Administer Loggly Client settings.',
    'access arguments' => array('administer loggly http client'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loggly_http_admin'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function loggly_http_permission() {
  $permissions = array();

  $permissions['administer loggly http client'] = array(
    'title' => t('Administer Loggly HTTP client'),
  );

  return $permissions;
}

/**
 * Loggly HTTP POST API Configuration Form.
 */
function loggly_http_admin($form, &$form_state) {
  $form['loggly_http_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Loggly HTTP API Token'),
    '#description' => t('TOKEN: your customer token from the source setup page'),
    '#default_value' => variable_get('loggly_http_token', NULL),
  );

  $form['loggly_http_severity_level'] = array(
    '#type' => 'select',
    '#title' => t('Watchdog Severity'),
    '#options' => loggly_http_severity_levels(),
    '#default_value' => variable_get('loggly_http_severity_level', WATCHDOG_ERROR),
    '#description' => t('The minimum severity level to be reached before an event is pushed to Loggly.'),
  );

  $form['loggly_http_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Loggly HTTP API'),
    '#description' => t('Enable Loggly HTTP POST'),
    '#default_value' => variable_get('loggly_http_enabled'),
  );

  return system_settings_form($form);
}

/**
 * Returns an array of watchdog severity levels.
 *
 * @return array
 *   Array of Watchdog severity levels.
 */
function loggly_http_severity_levels() {
  return array(
    WATCHDOG_EMERGENCY => t('Emergency'),
    WATCHDOG_ALERT => t('Alert'),
    WATCHDOG_CRITICAL => t('Critical'),
    WATCHDOG_ERROR => t('Error'),
    WATCHDOG_WARNING => t('Warning'),
    WATCHDOG_NOTICE => t('Notice'),
    WATCHDOG_INFO => t('Info'),
    WATCHDOG_DEBUG => t('Debug'),
  );
}

/**
 * Implements hook_watchdog().
 *
 * HTTP POST JSON Object as a single event to Loggly.
 *
 * These events can be searched in Loggly by "tag:http".
 */
function loggly_http_watchdog(array $log_entry) {
  if (!variable_get('loggly_http_enabled')) {
    return;
  }

  if ($log_entry['severity'] > variable_get('loggly_http_severity_level')) {
    return;
  }

  $event = array(
    'timestamp' => $log_entry['timestamp'],
    'type' => $log_entry['type'],
    'ip' => $log_entry['ip'],
    'request_uri' => $log_entry['request_uri'],
    'referer' => $log_entry['referer'],
    'uid' => $log_entry['uid'],
    'link' => strip_tags($log_entry['link']),
    'message' => empty($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables'])),
  );

    if ($log_entry['severity'] >= WATCHDOG_CRITICAL) {
      $event += array(
        'debug_backtrace' => debug_backtrace(),
      );
    }


  loggly_http_register_event($event);
}
